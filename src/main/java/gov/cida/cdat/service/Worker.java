package gov.cida.cdat.service;

import gov.cida.cdat.control.Callback;
import gov.cida.cdat.control.Status;
import gov.cida.cdat.message.Message;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public abstract class Worker { 
	private final Logger logger = LoggerFactory.getLogger(getClass());
	
	// this could be generated by an AKKA actor rather than random number - this is just an initial impl
	private final long id = (long)(Math.random() * 10000000000000L);
	private boolean isComplete;
	private Callback onComplete;
	private Throwable currentError;
	
	// open, connect, configure, etc
	public void begin() throws Exception { // TODO use framework exceptions
		logger.trace("Worker begin: " + id);
	}

	// close, disconnect, cleanup resources, etc
	public void end() {
		isComplete = true;
		
		// TODO this should be a callback to the delegate?
		if (onComplete!=null) {
			onComplete.onComplete(null, Message.create(Status.isDone));
		}
		logger.trace("Worker end: " + id);
	}
	
	public final boolean hasError() {
		return currentError != null;
	}	
	
	public final Throwable getCurrentError() {
		return currentError;
	}
	
	public final void setCurrentError(Throwable currentError) {
		this.currentError = currentError;
	}
	
	public final long getId() {
		return id;
	}
	
	public final boolean isComplete() {
		return isComplete;
	}
	
}
