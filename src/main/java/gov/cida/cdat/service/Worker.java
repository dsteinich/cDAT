package gov.cida.cdat.service;

import gov.cida.cdat.exception.CdatException;
import gov.cida.cdat.message.Message;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * <p>This is the means for the user to submit custom work to the SCManager.
 * This default instance primarily trace logs for each non-final method except one.
 * The end() method sets isComplete=true. Call super.end() or the extended class should set it.
 * </p>
 * <p><b>Caution</b>: The user should not make thread unsafe calls to their worker.
 * The idea of this is to access status via the messaging system. However,
 * it is necessary to make it plausible to submit work into the multithreaded
 * container.
 * </p>
 * 
 * @author duselmann
 */
public abstract class Worker {
	private final Logger logger = LoggerFactory.getLogger(getClass());
	
	/**
	 *  This could be generated by an AKKA actor rather than random number.
	 *  It is just an initial impl from initial specs and might not be used
	 */
	private final long id = (long)(Math.random() * 10000000000000L);
	/**
	 * Set to true by end() to indicate that it was called - this worker is done 
	 */
	private boolean    isComplete;
	/**
	 * Stores the most recent error. Hope you do not have too many.
	 * An enhancement would be to make this a list, stack, or queue.
	 */
	private Throwable  currentError;
	
	/**
	 * The worker will receive all messages destine for the work of its assigned name.
	 * <i><b>Override</b></i> this for the custom worker to respond to custom messages. The worker
	 * will not be able to prevent framework messages from causing their intended action. 
	 * @param msg the message directed to this worker for custom behavior
	 * @return the custom response message from the worker.
	 */
	public Message onReceive(Message msg) {
		logger.trace("Worker onReceive: {}  message {}", id, msg);
		return Message.create("Not Handled");
	}	
	
	/**
	 * <i><b>Override</b></i> this to open, connect, configure resources, etc.
	 * You are guaranteed that this will be called before the process is started.
	 */
	public void begin() throws CdatException {
		logger.trace("Worker begin: {}", id);
	}
	
	/**
	 * Processes data and then returns if there is more to process.
	 * <i><b>Override</b></i> this with your process specific needs.
	 * Also, workers should release to receive (and respond to) messages.
	 * If there are no messages then the process will be immediately called.
	 * @return true if the is more to process and false when done
	 * @throws CdatException
	 */
	public boolean process() throws CdatException {
		logger.trace("Worker processing some data: {}", id);
		return false; // there is never any data to process in the abstract
	}

	/**
	 * <i><b>Override</b></i> this to close, disconnect, cleanup resources, etc.
	 * You are guaranteed that this will be called when the process is 
	 * finished or encounters an error.
	 * 
	 * Call super.end() in order to trigger the 
	 */
	public void end() {
		isComplete = true;
		logger.trace("Worker end: {}", id);
	}
	
	/**
	 * @return true if the worker had an exception
	 */
	public final boolean hasError() {
		return currentError != null;
	}
	
	/**
	 * @return the current exception if one occurred
	 */
	public final Throwable getCurrentError() {
		return currentError;
	}
	
	/**
	 * The delegate will set this exception if one is detected.
	 * @param currentError
	 */
	final void setCurrentError(Throwable currentError) {
		this.currentError = currentError;
	}
	
	/**
	 * This was in the initial spec and might not be needed given the AKKA actor name.
	 * @return the worker id
	 */
	public final long getId() {
		return id;
	}
	
	/**
	 * The default end() implementation will set this when it is called
	 * @return true if the worker is done
	 */
	public final boolean isComplete() {
		return isComplete;
	}

	/**
	 * By default it continues on error in order to send an onComplete callback.
	 * <i><b>Override</b></i> this for custom behavior.
	 * @param error the error encountered
	 * @return true if the worker should be terminated when an error is encountered
	 */
	public boolean isTerminateOnError(Exception error) {
		return false;
	}
}
